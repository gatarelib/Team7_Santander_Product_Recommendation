{
  "paragraphs": [
    {
      "text": "/* Read Training data using spark-csv */\n\nval df \u003d sqlContext.read\n    .format(\"com.databricks.spark.csv\")\n    .option(\"header\", \"true\") // Use first line of all files as header\n    .option(\"inferSchema\", \"true\") // Automatically infer data types //.option(\"quote\", \"\\\"\")\n    .option(\"mode\", \"DROPMALFORMED\")\n    .load(\"file:///Users/vaishalilambe/Downloads/train_ver2.csv\")\n\n/* Print columns of the dataframe */\ndf.columns.map(c \u003d\u003e println(c))",
      "dateUpdated": "Mar 26, 2018 5:29:25 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "df: org.apache.spark.sql.DataFrame \u003d [fecha_dato: timestamp, ncodpers: double ... 46 more fields]\nfecha_dato\nncodpers\nind_empleado\npais_residencia\nsexo\nage\nfecha_alta\nind_nuevo\nantiguedad\nindrel\nult_fec_cli_1t\nindrel_1mes\ntiprel_1mes\nindresi\nindext\nconyuemp\ncanal_entrada\nindfall\ntipodom\ncod_prov\nnomprov\nind_actividad_cliente\nrenta\nsegmento\nind_ahor_fin_ult1\nind_aval_fin_ult1\nind_cco_fin_ult1\nind_cder_fin_ult1\nind_cno_fin_ult1\nind_ctju_fin_ult1\nind_ctma_fin_ult1\nind_ctop_fin_ult1\nind_ctpp_fin_ult1\nind_deco_fin_ult1\nind_deme_fin_ult1\nind_dela_fin_ult1\nind_ecue_fin_ult1\nind_fond_fin_ult1\nind_hip_fin_ult1\nind_plan_fin_ult1\nind_pres_fin_ult1\nind_reca_fin_ult1\nind_tjcr_fin_ult1\nind_valo_fin_ult1\nind_viv_fin_ult1\nind_nomina_ult1\nind_nom_pens_ult1\nind_recibo_ult1\nres39: Array[Unit] \u003d Array((), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), ())\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1522099765374_-974357954",
      "id": "20171130-181426_1684841825",
      "dateCreated": "Mar 26, 2018 5:29:25 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "/* Find number of null records for each column in a dataframe */\nimport org.apache.spark.sql.functions.{sum, col}\ndf.select(df.columns.map(c \u003d\u003e sum(col(c).isNull.cast(\"int\")).alias(c)): _*).show\n",
      "dateUpdated": "Mar 26, 2018 5:29:25 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 316.0,
              "optionOpen": false
            }
          }
        },
        "enabled": true,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "import org.apache.spark.sql.functions.{sum, col}\nn|fecha_dato|ncodpers|ind_empleado|pais_residencia| sexo|age|fecha_alta|ind_nuevo|antiguedad|indrel|ult_fec_cli_1t|indrel_1mes|tiprel_1mes|indresi|indext|conyuemp|canal_entrada|indfall|tipodom|cod_prov|nomprov|ind_actividad_cliente|  renta|segmento|ind_ahor_fin_ult1|ind_aval_fin_ult1|ind_cco_fin_ult1|ind_cder_fin_ult1|ind_cno_fin_ult1|ind_ctju_fin_ult1|ind_ctma_fin_ult1|ind_ctop_fin_ult1|ind_ctpp_fin_ult1|ind_deco_fin_ult1|ind_deme_fin_ult1|ind_dela_fin_ult1|ind_ecue_fin_ult1|ind_fond_fin_ult1|ind_hip_fin_ult1|ind_plan_fin_ult1|ind_pres_fin_ult1|ind_reca_fin_ult1|ind_tjcr_fin_ult1|ind_valo_fin_ult1|ind_viv_fin_ult1|ind_nomina_ult1|ind_nom_pens_ult1|ind_recibo_ult1|\nn|         0|       0|       27734|          27734|27804|  0|     27734|        0|         0|     0|      13622516|     149781|     149781|  27734| 27734|13645501|       186126|  27734|      0|       0|  93591|                    0|2794375|  189368|                0|                0|               0|                0|               0|                0|                0|                0|                0|                0|                0|                0|                0|                0|               0|                0|                0|                0|                0|                0|               0|              0|                0|              0|\nn\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1522099765388_-895099680",
      "id": "20180326-150009_600529673",
      "dateCreated": "Mar 26, 2018 5:29:25 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "/* Find data type for each column of a dataframe */\ndf.printSchema()",
      "dateUpdated": "Mar 26, 2018 5:29:25 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "root\n |-- fecha_dato: timestamp (nullable \u003d true)\n |-- ncodpers: double (nullable \u003d true)\n |-- ind_empleado: string (nullable \u003d true)\n |-- pais_residencia: string (nullable \u003d true)\n |-- sexo: string (nullable \u003d true)\n |-- age: string (nullable \u003d true)\n |-- fecha_alta: timestamp (nullable \u003d true)\n |-- ind_nuevo: string (nullable \u003d true)\n |-- antiguedad: string (nullable \u003d true)\n |-- indrel: string (nullable \u003d true)\n |-- ult_fec_cli_1t: timestamp (nullable \u003d true)\n |-- indrel_1mes: string (nullable \u003d true)\n |-- tiprel_1mes: string (nullable \u003d true)\n |-- indresi: string (nullable \u003d true)\n |-- indext: string (nullable \u003d true)\n |-- conyuemp: string (nullable \u003d true)\n |-- canal_entrada: string (nullable \u003d true)\n |-- indfall: string (nullable \u003d true)\n |-- tipodom: string (nullable \u003d true)\n |-- cod_prov: string (nullable \u003d true)\n |-- nomprov: string (nullable \u003d true)\n |-- ind_actividad_cliente: string (nullable \u003d true)\n |-- renta: double (nullable \u003d true)\n |-- segmento: string (nullable \u003d true)\n |-- ind_ahor_fin_ult1: integer (nullable \u003d true)\n |-- ind_aval_fin_ult1: integer (nullable \u003d true)\n |-- ind_cco_fin_ult1: integer (nullable \u003d true)\n |-- ind_cder_fin_ult1: integer (nullable \u003d true)\n |-- ind_cno_fin_ult1: integer (nullable \u003d true)\n |-- ind_ctju_fin_ult1: integer (nullable \u003d true)\n |-- ind_ctma_fin_ult1: integer (nullable \u003d true)\n |-- ind_ctop_fin_ult1: integer (nullable \u003d true)\n |-- ind_ctpp_fin_ult1: integer (nullable \u003d true)\n |-- ind_deco_fin_ult1: integer (nullable \u003d true)\n |-- ind_deme_fin_ult1: integer (nullable \u003d true)\n |-- ind_dela_fin_ult1: integer (nullable \u003d true)\n |-- ind_ecue_fin_ult1: integer (nullable \u003d true)\n |-- ind_fond_fin_ult1: integer (nullable \u003d true)\n |-- ind_hip_fin_ult1: integer (nullable \u003d true)\n |-- ind_plan_fin_ult1: integer (nullable \u003d true)\n |-- ind_pres_fin_ult1: integer (nullable \u003d true)\n |-- ind_reca_fin_ult1: integer (nullable \u003d true)\n |-- ind_tjcr_fin_ult1: integer (nullable \u003d true)\n |-- ind_valo_fin_ult1: integer (nullable \u003d true)\n |-- ind_viv_fin_ult1: integer (nullable \u003d true)\n |-- ind_nomina_ult1: string (nullable \u003d true)\n |-- ind_nom_pens_ult1: string (nullable \u003d true)\n |-- ind_recibo_ult1: integer (nullable \u003d true)\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1522099765389_-895484429",
      "id": "20180326-153629_1456295952",
      "dateCreated": "Mar 26, 2018 5:29:25 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "/* Find total number of records of a dataframe */\nval rows \u003d df.count()\n",
      "dateUpdated": "Mar 26, 2018 5:29:25 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "scala"
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "rows: Long \u003d 13647309\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1522099765389_-895484429",
      "id": "20180326-151413_364454385",
      "dateCreated": "Mar 26, 2018 5:29:25 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "\nval newNames \u003d Seq(\"Partitioned_Date\",\"Cust_Code\",\"Emp_Index\", \"Cust_Residence\", \"Cust_Gender\", \"Cust_Age\", \"First_Holder_Date\", \"New_Cust_Index\", \"Cust_Seniority\",\n    \"Cust_Index_Primary\", \"Last_Date_Primary_Cust\",\"Cust_Type\",\"Cust_Relation_Type\",\"Residence_Index\",\"Foreigner_Index\", \"Spouse_Index\", \"Channel\", \"Deceased_Index\", \"Addres_Type\",\n    \"Province_Code\", \"Province_Name\", \"Activity_Index\",\"Gross_Income\",\"Cust_Identification\", \"Saving_Acc\", \"Guarantees\",\"Current_Acc\",\"Derivada_Acc\", \"Payroll_Acc\", \"Junior_Acc\", \n    \"Mas_Acc\",\"Particular_Acc\", \"Particular_Plus_Acc\",\"Short_Term_Deposit\", \"Medium_Term_Deposits\",\"Long_Term_Deposits\",\"e_Acc\", \"Funds\", \"Mortgage\",\"Pensions\",\"Loans\",\"Taxes\",\n    \"Credit_Card\",\"Securities\",\"Home_Acc\", \"Payroll\", \"Nom_Pensions\",\"Direct_Debit\" )\nval dfRenamed \u003d df.toDF(newNames: _*)\n\n/* Dataframe as table */    \ndfRenamed.registerTempTable(\"sbank\")",
      "dateUpdated": "Mar 26, 2018 5:29:25 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "scala"
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "newNames: Seq[String] \u003d List(Partitioned_Date, Cust_Code, Emp_Index, Cust_Residence, Cust_Gender, Cust_Age, First_Holder_Date, New_Cust_Index, Cust_Seniority, Cust_Index_Primary, Last_Date_Primary_Cust, Cust_Type, Cust_Relation_Type, Residence_Index, Foreigner_Index, Spouse_Index, Channel, Deceased_Index, Addres_Type, Province_Code, Province_Name, Activity_Index, Gross_Income, Cust_Identification, Saving_Acc, Guarantees, Current_Acc, Derivada_Acc, Payroll_Acc, Junior_Acc, Mas_Acc, Particular_Acc, Particular_Plus_Acc, Short_Term_Deposit, Medium_Term_Deposits, Long_Term_Deposits, e_Acc, Funds, Mortgage, Pensions, Loans, Taxes, Credit_Card, Securities, Home_Acc, Payroll, Nom_Pensions, Direct_Debit)\ndfRenamed: org.apache.spark.sql.DataFrame \u003d [Partitioned_Date: timestamp, Cust_Code: double ... 46 more fields]\nwarning: there was one deprecation warning; re-run with -deprecation for details\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1522099765390_-894330182",
      "id": "20180326-155123_733416086",
      "dateCreated": "Mar 26, 2018 5:29:25 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "/* Write new dataframe with changed column names into .csv\"*/\ndfRenamed.coalesce(1).\n    write.\n    format(\"com.databricks.spark.csv\").\n    option(\"header\", \"true\").\n    save(\"file:///Users/vaishalilambe/Downloads/new_train_ver2.csv\")",
      "dateUpdated": "Mar 26, 2018 5:29:25 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "scala"
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1522099765391_-894714931",
      "id": "20180326-163626_1010244284",
      "dateCreated": "Mar 26, 2018 5:29:25 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "/* Import spark IOUtils */\n%spark import org.apache.commons.io.IOUtils\n",
      "dateUpdated": "Mar 26, 2018 5:29:25 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "scala"
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u003cconsole\u003e:2: error: \u0027;\u0027 expected but \u0027import\u0027 found.\n%spark import org.apache.commons.io.IOUtils\n       ^\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1522099765391_-894714931",
      "id": "20180326-163213_414423801",
      "dateCreated": "Mar 26, 2018 5:29:25 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "\n\n/* Finding distrubution of gender */\n%spark.sql\nselect count(Cust_Gender),Cust_Gender\nfrom sbank\n--where Cust_Gender IS NOT NULL\ngroup by Cust_Gender\n\n\n\n",
      "dateUpdated": "Mar 26, 2018 5:29:25 PM",
      "config": {
        "colWidth": 4.0,
        "editorMode": "ace/mode/scala",
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 236.0,
              "optionOpen": false,
              "setting": {
                "multiBarChart": {
                  "stacked": false
                },
                "stackedAreaChart": {
                  "style": "expand"
                }
              },
              "commonSetting": {},
              "keys": [
                {
                  "name": "count(sexo)",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "values": [
                {
                  "name": "Gender",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ]
            },
            "helium": {}
          }
        },
        "enabled": true,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u003cconsole\u003e:4: error: \u0027;\u0027 expected but \u0027.\u0027 found.\n%spark.sql\n      ^\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1522099765392_-884326711",
      "id": "20171130-174854_1830535417",
      "dateCreated": "Mar 26, 2018 5:29:25 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "\n\n/* Counting number of cutomers having same last date as primary customer */\n%spark.sql\nselect count(Last_Date), Last_Date\nfrom sbank\ngroup by Last_Date\norder by Last_Date asc\n ",
      "dateUpdated": "Mar 26, 2018 5:29:25 PM",
      "config": {
        "colWidth": 4.0,
        "editorMode": "ace/mode/scala",
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false
            },
            "helium": {}
          }
        },
        "enabled": true,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u003cconsole\u003e:4: error: \u0027;\u0027 expected but \u0027.\u0027 found.\n%spark.sql\n      ^\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1522099765394_-883557213",
      "id": "20171130-180401_1527367290",
      "dateCreated": "Mar 26, 2018 5:29:25 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "\n\n/* Distribution of customer identification as VIP, Individuals or students*/\n%spark.sql\nselect count(Cust_Identification), Cust_Identification \nfrom sbank\ngroup by Cust_Identification \n",
      "dateUpdated": "Mar 26, 2018 5:29:25 PM",
      "config": {
        "colWidth": 4.0,
        "editorMode": "ace/mode/scala",
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 314.0,
              "optionOpen": false
            },
            "helium": {}
          }
        },
        "enabled": true,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u003cconsole\u003e:4: error: \u0027;\u0027 expected but \u0027.\u0027 found.\n%spark.sql\n      ^\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1522099765394_-883557213",
      "id": "20171130-180522_911902158",
      "dateCreated": "Mar 26, 2018 5:29:25 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "\n\n/* Distribution of customer Type */\n%spark.sql\nselect count(Cust_Type),Cust_Type\nfrom sbank\ngroup by Cust_Type\n",
      "dateUpdated": "Mar 26, 2018 5:29:25 PM",
      "config": {
        "colWidth": 4.0,
        "editorMode": "ace/mode/scala",
        "results": {
          "0": {
            "graph": {
              "mode": "pieChart",
              "height": 284.0,
              "optionOpen": false
            },
            "helium": {}
          }
        },
        "enabled": true,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u003cconsole\u003e:4: error: \u0027;\u0027 expected but \u0027.\u0027 found.\n%spark.sql\n      ^\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1522099765395_-883941962",
      "id": "20171130-181324_1848871664",
      "dateCreated": "Mar 26, 2018 5:29:25 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "\n\n/* Average gross income for each type of customer identification */\n%spark.sql\nselect avg(Gross_Income) as Avg_Gross_Income,  Cust_Identification \nfrom sbank\nwhere Cust_Identification  is NOT NULL\ngroup by Cust_Identification ",
      "dateUpdated": "Mar 26, 2018 5:29:25 PM",
      "config": {
        "colWidth": 4.0,
        "editorMode": "ace/mode/scala",
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 266.0,
              "optionOpen": false
            },
            "helium": {}
          }
        },
        "enabled": true,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u003cconsole\u003e:4: error: \u0027;\u0027 expected but \u0027.\u0027 found.\n%spark.sql\n      ^\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1522099765396_-885865707",
      "id": "20171130-180611_720721070",
      "dateCreated": "Mar 26, 2018 5:29:25 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "\n\n/* Average gross income for each gener type */\n%spark.sql\nselect avg(Gross_Income) as Avg_Gross_Income, Cust_Gender\nfrom sbank\nwhere Cust_Gender IS NOT NULL\ngroup by Cust_Gender\n",
      "dateUpdated": "Mar 26, 2018 5:29:25 PM",
      "config": {
        "colWidth": 4.0,
        "editorMode": "ace/mode/scala",
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 264.0,
              "optionOpen": false
            },
            "helium": {}
          }
        },
        "enabled": true,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u003cconsole\u003e:4: error: \u0027;\u0027 expected but \u0027.\u0027 found.\n%spark.sql\n      ^\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1522099765397_-886250456",
      "id": "20171130-181357_250140803",
      "dateCreated": "Mar 26, 2018 5:29:25 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "\n\n/* Districution for gender and customer identification */\n%spark.sql\nselect count(sexo) as Count_Gender, count(segmento) as Count_Cust_Identification, sexo as Gender, segmento as Cust_Identification\nfrom sbank\nwhere sexo IS NOT NULL\nand segmento IS NOT NULL\ngroup by sexo,segmento",
      "dateUpdated": "Mar 26, 2018 5:29:25 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false
            },
            "helium": {}
          }
        },
        "enabled": true,
        "editorSetting": {
          "language": "scala"
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u003cconsole\u003e:4: error: \u0027;\u0027 expected but \u0027.\u0027 found.\n%spark.sql\n      ^\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1522099765397_-886250456",
      "id": "20180323-161355_325105400",
      "dateCreated": "Mar 26, 2018 5:29:25 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "\n\n/* Read Training data using spark-csv */\n%spark.sql\nselect count(ind_ahor_fin_ult1) as Num_Saving_Acc, count(ind_cco_fin_ult1) as Num_Guarantees, count(ind_cco_fin_ult1) as Num_Current_Accounts,count(ind_cder_fin_ult1) as Num_Derivada_Account,count(sexo) as Num_Gender, sexo as Gender, count(segmento) as Num_Cust_Identification, segmento as Cust_Identification,avg(renta) as Avg_Gross_Income\nfrom sbank\nwhere ind_ahor_fin_ult1 is NOT NULL\nand renta is NOT NULL\nand sexo is NOT NULL\nand segmento is NOT NULL\ngroup by ind_ahor_fin_ult1,sexo,segmento\n",
      "dateUpdated": "Mar 26, 2018 5:29:25 PM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "scala"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "results": {
          "0": {
            "graph": {
              "mode": "pieChart",
              "height": 300.0,
              "optionOpen": false
            },
            "helium": {}
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u003cconsole\u003e:4: error: \u0027;\u0027 expected but \u0027.\u0027 found.\n%spark.sql\n      ^\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1522099765398_-885096209",
      "id": "20180323-223108_606438277",
      "dateCreated": "Mar 26, 2018 5:29:25 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.sql\nselect count(ind_cno_fin_ult1) as Num_Payroll_Acc, count(ind_ctju_fin_ult1) as Num_Junior_Acc, count(ind_ctma_fin_ult1) as Num_Mas_Acc,count(ind_ctop_fin_ult1) as Num_Perticular_Acc,count(sexo) as Num_Gender, sexo as Gender, count(segmento) as Num_Cust_Identification, segmento as Cust_Identification,avg(renta) as Avg_Gross_Income\nfrom sbank\nwhere ind_ahor_fin_ult1 is NOT NULL\nand renta is NOT NULL\nand sexo is NOT NULL\nand segmento is NOT NULL\ngroup by ind_ahor_fin_ult1,sexo,segmento",
      "dateUpdated": "Mar 26, 2018 5:29:25 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "results": {
          "0": {
            "graph": {
              "mode": "pieChart",
              "height": 300.0,
              "optionOpen": false
            },
            "helium": {}
          }
        },
        "enabled": true,
        "editorSetting": {
          "language": "sql"
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "org.apache.spark.sql.AnalysisException: cannot resolve \u0027`ind_ahor_fin_ult1`\u0027 given input columns: [Taxes, Last_Date_Primary_Cust, Emp_Index, Province_Name, Particular_Acc, Funds, Cust_Code, Nom_Pensions, Saving_Acc, Payroll, Home_Acc, Cust_Seniority, Mas_Acc, Foreigner_Index, Guarantees, Credit_Card, Activity_Index, Junior_Acc, Derivada_Acc, Cust_Index_Primary, Loans, Long_Term_Deposits, Addres_Type, Residence_Index, First_Holder_Date, Cust_Type, New_Cust_Index, Cust_Relation_Type, Medium_Term_Deposits, Spouse_Index, Payroll_Acc, Partitioned_Date, Province_Code, Cust_Residence, Channel, Mortgage, Securities, Particular_Plus_Acc, Current_Acc, Short_Term_Deposit, Cust_Gender, Deceased_Index, e_Acc, Gross_Income, Pensions, Direct_Debit, Cust_Identification, Cust_Age]; line 3 pos 6;\n\u0027Aggregate [\u0027ind_ahor_fin_ult1, \u0027sexo, \u0027segmento], [\u0027count(\u0027ind_cno_fin_ult1) AS Num_Payroll_Acc#635, \u0027count(\u0027ind_ctju_fin_ult1) AS Num_Junior_Acc#636, \u0027count(\u0027ind_ctma_fin_ult1) AS Num_Mas_Acc#637, \u0027count(\u0027ind_ctop_fin_ult1) AS Num_Perticular_Acc#638, \u0027count(\u0027sexo) AS Num_Gender#639, \u0027sexo AS Gender#640, \u0027count(\u0027segmento) AS Num_Cust_Identification#641, \u0027segmento AS Cust_Identification#642, \u0027avg(\u0027renta) AS Avg_Gross_Income#643]\n+- \u0027Filter ((isnotnull(\u0027ind_ahor_fin_ult1) \u0026\u0026 isnotnull(\u0027renta)) \u0026\u0026 (isnotnull(\u0027sexo) \u0026\u0026 isnotnull(\u0027segmento)))\n   +- SubqueryAlias sbank, `sbank`\n      +- Project [fecha_dato#0 AS Partitioned_Date#244, ncodpers#1 AS Cust_Code#245, ind_empleado#2 AS Emp_Index#246, pais_residencia#3 AS Cust_Residence#247, sexo#4 AS Cust_Gender#248, age#5 AS Cust_Age#249, fecha_alta#6 AS First_Holder_Date#250, ind_nuevo#7 AS New_Cust_Index#251, antiguedad#8 AS Cust_Seniority#252, indrel#9 AS Cust_Index_Primary#253, ult_fec_cli_1t#10 AS Last_Date_Primary_Cust#254, indrel_1mes#11 AS Cust_Type#255, tiprel_1mes#12 AS Cust_Relation_Type#256, indresi#13 AS Residence_Index#257, indext#14 AS Foreigner_Index#258, conyuemp#15 AS Spouse_Index#259, canal_entrada#16 AS Channel#260, indfall#17 AS Deceased_Index#261, tipodom#18 AS Addres_Type#262, cod_prov#19 AS Province_Code#263, nomprov#20 AS Province_Name#264, ind_actividad_cliente#21 AS Activity_Index#265, renta#22 AS Gross_Income#266, segmento#23 AS Cust_Identification#267, ... 24 more fields]\n         +- Relation[fecha_dato#0,ncodpers#1,ind_empleado#2,pais_residencia#3,sexo#4,age#5,fecha_alta#6,ind_nuevo#7,antiguedad#8,indrel#9,ult_fec_cli_1t#10,indrel_1mes#11,tiprel_1mes#12,indresi#13,indext#14,conyuemp#15,canal_entrada#16,indfall#17,tipodom#18,cod_prov#19,nomprov#20,ind_actividad_cliente#21,renta#22,segmento#23,... 24 more fields] csv\n\n\tat org.apache.spark.sql.catalyst.analysis.package$AnalysisErrorAt.failAnalysis(package.scala:42)\n\tat org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1$$anonfun$apply$2.applyOrElse(CheckAnalysis.scala:77)\n\tat org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1$$anonfun$apply$2.applyOrElse(CheckAnalysis.scala:74)\n\tat org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$transformUp$1.apply(TreeNode.scala:310)\n\tat org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$transformUp$1.apply(TreeNode.scala:310)\n\tat org.apache.spark.sql.catalyst.trees.CurrentOrigin$.withOrigin(TreeNode.scala:70)\n\tat org.apache.spark.sql.catalyst.trees.TreeNode.transformUp(TreeNode.scala:309)\n\tat org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$4.apply(TreeNode.scala:307)\n\tat org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$4.apply(TreeNode.scala:307)\n\tat org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$5.apply(TreeNode.scala:331)\n\tat org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator(TreeNode.scala:188)\n\tat org.apache.spark.sql.catalyst.trees.TreeNode.transformChildren(TreeNode.scala:329)\n\tat org.apache.spark.sql.catalyst.trees.TreeNode.transformUp(TreeNode.scala:307)\n\tat org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$4.apply(TreeNode.scala:307)\n\tat org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$4.apply(TreeNode.scala:307)\n\tat org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$5.apply(TreeNode.scala:331)\n\tat org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator(TreeNode.scala:188)\n\tat org.apache.spark.sql.catalyst.trees.TreeNode.transformChildren(TreeNode.scala:329)\n\tat org.apache.spark.sql.catalyst.trees.TreeNode.transformUp(TreeNode.scala:307)\n\tat org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$4.apply(TreeNode.scala:307)\n\tat org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$4.apply(TreeNode.scala:307)\n\tat org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$5.apply(TreeNode.scala:331)\n\tat org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator(TreeNode.scala:188)\n\tat org.apache.spark.sql.catalyst.trees.TreeNode.transformChildren(TreeNode.scala:329)\n\tat org.apache.spark.sql.catalyst.trees.TreeNode.transformUp(TreeNode.scala:307)\n\tat org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionUp$1(QueryPlan.scala:282)\n\tat org.apache.spark.sql.catalyst.plans.QueryPlan.org$apache$spark$sql$catalyst$plans$QueryPlan$$recursiveTransform$2(QueryPlan.scala:292)\n\tat org.apache.spark.sql.catalyst.plans.QueryPlan$$anonfun$7.apply(QueryPlan.scala:301)\n\tat org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator(TreeNode.scala:188)\n\tat org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionsUp(QueryPlan.scala:301)\n\tat org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1.apply(CheckAnalysis.scala:74)\n\tat org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1.apply(CheckAnalysis.scala:67)\n\tat org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp(TreeNode.scala:128)\n\tat org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$foreachUp$1.apply(TreeNode.scala:127)\n\tat org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$foreachUp$1.apply(TreeNode.scala:127)\n\tat scala.collection.immutable.List.foreach(List.scala:381)\n\tat org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp(TreeNode.scala:127)\n\tat org.apache.spark.sql.catalyst.analysis.CheckAnalysis$class.checkAnalysis(CheckAnalysis.scala:67)\n\tat org.apache.spark.sql.catalyst.analysis.Analyzer.checkAnalysis(Analyzer.scala:57)\n\tat org.apache.spark.sql.execution.QueryExecution.assertAnalyzed(QueryExecution.scala:48)\n\tat org.apache.spark.sql.Dataset$.ofRows(Dataset.scala:63)\n\tat org.apache.spark.sql.SparkSession.sql(SparkSession.scala:592)\n\tat org.apache.spark.sql.SQLContext.sql(SQLContext.scala:699)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.zeppelin.spark.SparkSqlInterpreter.interpret(SparkSqlInterpreter.java:116)\n\tat org.apache.zeppelin.interpreter.LazyOpenInterpreter.interpret(LazyOpenInterpreter.java:97)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer$InterpretJob.jobRun(RemoteInterpreterServer.java:498)\n\tat org.apache.zeppelin.scheduler.Job.run(Job.java:175)\n\tat org.apache.zeppelin.scheduler.FIFOScheduler$1.run(FIFOScheduler.java:139)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1522099765398_-885096209",
      "id": "20180324-104245_2099438392",
      "dateCreated": "Mar 26, 2018 5:29:25 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "\n\n/* Ditribution of few products across gender, customer identification, avg gross income */\n%spark.sql\nselect count(ind_ctpp_fin_ult1) as Num_Perticular_Plus_Acc,count(sexo) as Num_Gender, sexo as Gender, count(segmento) as Num_Cust_Identification, segmento as Cust_Identification,avg(renta) as Avg_Gross_Income\nfrom sbank\nwhere ind_ahor_fin_ult1 is NOT NULL\nand renta is NOT NULL\nand sexo is NOT NULL\nand segmento is NOT NULL\ngroup by ind_ahor_fin_ult1,sexo,segmento",
      "dateUpdated": "Mar 26, 2018 5:29:25 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": {
          "0": {
            "graph": {
              "mode": "pieChart",
              "height": 300.0,
              "optionOpen": false
            },
            "helium": {}
          }
        },
        "enabled": true,
        "editorSetting": {
          "language": "scala"
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u003cconsole\u003e:4: error: \u0027;\u0027 expected but \u0027.\u0027 found.\n%spark.sql\n      ^\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1522099765399_-885480958",
      "id": "20180324-105849_1446750736",
      "dateCreated": "Mar 26, 2018 5:29:25 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.sql\nselect count(ind_deco_fin_ult1) as Num_Short_Term_Deposit,count(sexo) as Num_Gender, sexo as Gender, count(segmento) as Num_Cust_Identification, segmento as Cust_Identification,avg(renta) as Avg_Gross_Income\nfrom sbank\nwhere ind_ahor_fin_ult1 is NOT NULL\nand renta is NOT NULL\nand sexo is NOT NULL\nand segmento is NOT NULL\ngroup by sexo,segmento",
      "dateUpdated": "Mar 26, 2018 5:29:25 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "sql"
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "Num_Short_Term_Deposit\tNum_Gender\tGender\tNum_Cust_Identification\tCust_Identification\tAvg_Gross_Income\n2121150\t2121150\tH\t2121150\t03 - UNIVERSITARIO\t113415.91116352427\n306160\t306160\tV\t306160\t01 - TOP\t173019.65416266042\n3935949\t3935949\tV\t3935949\t02 - PARTICULARES\t139593.6386064534\n2586894\t2586894\tH\t2586894\t02 - PARTICULARES\t144547.24711068664\n1672298\t1672298\tV\t1672298\t03 - UNIVERSITARIO\t120256.61834835628\n173615\t173615\tH\t173615\t01 - TOP\t180849.68602067855\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1522099765400_-887404702",
      "id": "20180326-143452_318103717",
      "dateCreated": "Mar 26, 2018 5:29:25 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.sql\nselect count(ind_deme_fin_ult1) as Num_Medium_Term_Deposit,count(sexo) as Num_Gender, sexo as Gender, count(segmento) as Num_Cust_Identification, segmento as Cust_Identification,avg(renta) as Avg_Gross_Income\nfrom sbank\nwhere ind_ahor_fin_ult1 is NOT NULL\nand renta is NOT NULL\nand sexo is NOT NULL\nand segmento is NOT NULL\ngroup by sexo,segmento",
      "dateUpdated": "Mar 26, 2018 5:29:25 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "sql"
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "Num_Medium_Term_Deposit\tNum_Gender\tGender\tNum_Cust_Identification\tCust_Identification\tAvg_Gross_Income\n2121150\t2121150\tH\t2121150\t03 - UNIVERSITARIO\t113415.91116352427\n306160\t306160\tV\t306160\t01 - TOP\t173019.65416266042\n3935949\t3935949\tV\t3935949\t02 - PARTICULARES\t139593.6386064534\n2586894\t2586894\tH\t2586894\t02 - PARTICULARES\t144547.24711068664\n1672298\t1672298\tV\t1672298\t03 - UNIVERSITARIO\t120256.61834835628\n173615\t173615\tH\t173615\t01 - TOP\t180849.68602067855\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1522099765400_-887404702",
      "id": "20180326-143545_211894114",
      "dateCreated": "Mar 26, 2018 5:29:25 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.sql\nselect count(ind_dela_fin_ult1) as Num_Long_Term_Deposit,count(sexo) as Num_Gender, sexo as Gender, count(segmento) as Num_Cust_Identification, segmento as Cust_Identification,avg(renta) as Avg_Gross_Income\nfrom sbank\nwhere ind_ahor_fin_ult1 is NOT NULL\nand renta is NOT NULL\nand sexo is NOT NULL\nand segmento is NOT NULL\ngroup by sexo,segmento",
      "dateUpdated": "Mar 26, 2018 5:29:25 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "sql"
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "Num_Long_Term_Deposit\tNum_Gender\tGender\tNum_Cust_Identification\tCust_Identification\tAvg_Gross_Income\n2121150\t2121150\tH\t2121150\t03 - UNIVERSITARIO\t113415.91116352427\n306160\t306160\tV\t306160\t01 - TOP\t173019.65416266042\n3935949\t3935949\tV\t3935949\t02 - PARTICULARES\t139593.6386064534\n2586894\t2586894\tH\t2586894\t02 - PARTICULARES\t144547.24711068664\n1672298\t1672298\tV\t1672298\t03 - UNIVERSITARIO\t120256.61834835628\n173615\t173615\tH\t173615\t01 - TOP\t180849.68602067855\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1522099765401_-887789451",
      "id": "20180326-143618_933808413",
      "dateCreated": "Mar 26, 2018 5:29:25 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "\n\n/* Ditribution of few products across gender, customer identification, avg gross income */\n%spark.sql\nselect count(ind_ecue_fin_ult1) as Num_e_Acc,count(sexo) as Num_Gender, sexo as Gender, count(segmento) as Num_Cust_Identification, segmento as Cust_Identification,avg(renta) as Avg_Gross_Income\nfrom sbank\nwhere ind_ahor_fin_ult1 is NOT NULL\nand renta is NOT NULL\nand sexo is NOT NULL\nand segmento is NOT NULL\ngroup by sexo,segmento",
      "dateUpdated": "Mar 26, 2018 5:29:25 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": true
            },
            "helium": {}
          }
        },
        "enabled": true,
        "editorSetting": {
          "language": "scala"
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u003cconsole\u003e:4: error: \u0027;\u0027 expected but \u0027.\u0027 found.\n%spark.sql\n      ^\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1522099765402_-886635204",
      "id": "20180324-110151_1660169145",
      "dateCreated": "Mar 26, 2018 5:29:25 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.sql\nselect count(ind_fond_fin_ult1) as Num_Funds,count(sexo) as Num_Gender, sexo as Gender, count(segmento) as Num_Cust_Identification, segmento as Cust_Identification,avg(renta) as Avg_Gross_Income\nfrom sbank\nwhere ind_ahor_fin_ult1 is NOT NULL\nand renta is NOT NULL\nand sexo is NOT NULL\nand segmento is NOT NULL\ngroup by sexo,segmento",
      "dateUpdated": "Mar 26, 2018 5:29:25 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "Num_Funds\tNum_Gender\tGender\tNum_Cust_Identification\tCust_Identification\tAvg_Gross_Income\n2121150\t2121150\tH\t2121150\t03 - UNIVERSITARIO\t113415.91116352427\n306160\t306160\tV\t306160\t01 - TOP\t173019.65416266042\n3935949\t3935949\tV\t3935949\t02 - PARTICULARES\t139593.6386064534\n2586894\t2586894\tH\t2586894\t02 - PARTICULARES\t144547.24711068664\n1672298\t1672298\tV\t1672298\t03 - UNIVERSITARIO\t120256.61834835628\n173615\t173615\tH\t173615\t01 - TOP\t180849.68602067855\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1522099765402_-886635204",
      "id": "20180326-143306_447287742",
      "dateCreated": "Mar 26, 2018 5:29:25 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.sql\nselect count(ind_hip_fin_ult1) as Num_Mortgage,count(sexo) as Num_Gender, sexo as Gender, count(segmento) as Num_Cust_Identification, segmento as Cust_Identification,avg(renta) as Avg_Gross_Income\nfrom sbank\nwhere ind_ahor_fin_ult1 is NOT NULL\nand renta is NOT NULL\nand sexo is NOT NULL\nand segmento is NOT NULL\ngroup by sexo,segmento",
      "dateUpdated": "Mar 26, 2018 5:29:25 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "sql"
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "Num_Mortgage\tNum_Gender\tGender\tNum_Cust_Identification\tCust_Identification\tAvg_Gross_Income\n2121150\t2121150\tH\t2121150\t03 - UNIVERSITARIO\t113415.91116352427\n306160\t306160\tV\t306160\t01 - TOP\t173019.65416266042\n3935949\t3935949\tV\t3935949\t02 - PARTICULARES\t139593.6386064534\n2586894\t2586894\tH\t2586894\t02 - PARTICULARES\t144547.24711068664\n1672298\t1672298\tV\t1672298\t03 - UNIVERSITARIO\t120256.61834835628\n173615\t173615\tH\t173615\t01 - TOP\t180849.68602067855\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1522099765403_-887019953",
      "id": "20180326-143344_890581897",
      "dateCreated": "Mar 26, 2018 5:29:25 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.sql\nselect count(ind_plan_fin_ult1) as Num_Pensions,count(sexo) as Num_Gender, sexo as Gender, count(segmento) as Num_Cust_Identification, segmento as Cust_Identification,avg(renta) as Avg_Gross_Income\nfrom sbank\nwhere ind_ahor_fin_ult1 is NOT NULL\nand renta is NOT NULL\nand sexo is NOT NULL\nand segmento is NOT NULL\ngroup by sexo,segmento",
      "dateUpdated": "Mar 26, 2018 5:29:25 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "sql"
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "Num_Pensions\tNum_Gender\tGender\tNum_Cust_Identification\tCust_Identification\tAvg_Gross_Income\n2121150\t2121150\tH\t2121150\t03 - UNIVERSITARIO\t113415.91116352427\n306160\t306160\tV\t306160\t01 - TOP\t173019.65416266042\n3935949\t3935949\tV\t3935949\t02 - PARTICULARES\t139593.6386064534\n2586894\t2586894\tH\t2586894\t02 - PARTICULARES\t144547.24711068664\n1672298\t1672298\tV\t1672298\t03 - UNIVERSITARIO\t120256.61834835628\n173615\t173615\tH\t173615\t01 - TOP\t180849.68602067855\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1522099765404_-888943698",
      "id": "20180326-143409_1226210738",
      "dateCreated": "Mar 26, 2018 5:29:25 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.sql\nselect count(ind_pres_fin_ult1) as Num_Loans,count(sexo) as Num_Gender, sexo as Gender, count(segmento) as Num_Cust_Identification, segmento as Cust_Identification,avg(renta) as Avg_Gross_Income\nfrom sbank\nwhere ind_ahor_fin_ult1 is NOT NULL\nand renta is NOT NULL\nand sexo is NOT NULL\nand segmento is NOT NULL\ngroup by sexo,segmento",
      "dateUpdated": "Mar 26, 2018 5:29:25 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "sql"
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "Num_Loans\tNum_Gender\tGender\tNum_Cust_Identification\tCust_Identification\tAvg_Gross_Income\n2121150\t2121150\tH\t2121150\t03 - UNIVERSITARIO\t113415.91116352427\n306160\t306160\tV\t306160\t01 - TOP\t173019.65416266042\n3935949\t3935949\tV\t3935949\t02 - PARTICULARES\t139593.6386064534\n2586894\t2586894\tH\t2586894\t02 - PARTICULARES\t144547.24711068664\n1672298\t1672298\tV\t1672298\t03 - UNIVERSITARIO\t120256.61834835628\n173615\t173615\tH\t173615\t01 - TOP\t180849.68602067855\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1522099765405_-889328447",
      "id": "20180324-110656_213650009",
      "dateCreated": "Mar 26, 2018 5:29:25 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.sql\nselect count(ind_reca_fin_ult1) as Num_Taxes,count(sexo) as Num_Gender, sexo as Gender, count(segmento) as Num_Cust_Identification, segmento as Cust_Identification,avg(renta) as Avg_Gross_Income\nfrom sbank\nwhere ind_ahor_fin_ult1 is NOT NULL\nand renta is NOT NULL\nand sexo is NOT NULL\nand segmento is NOT NULL\ngroup by sexo,segmento",
      "dateUpdated": "Mar 26, 2018 5:29:25 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "sql"
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "Num_Taxes\tNum_Gender\tGender\tNum_Cust_Identification\tCust_Identification\tAvg_Gross_Income\n2121150\t2121150\tH\t2121150\t03 - UNIVERSITARIO\t113415.91116352427\n306160\t306160\tV\t306160\t01 - TOP\t173019.65416266042\n3935949\t3935949\tV\t3935949\t02 - PARTICULARES\t139593.6386064534\n2586894\t2586894\tH\t2586894\t02 - PARTICULARES\t144547.24711068664\n1672298\t1672298\tV\t1672298\t03 - UNIVERSITARIO\t120256.61834835628\n173615\t173615\tH\t173615\t01 - TOP\t180849.68602067855\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1522099765406_-888174200",
      "id": "20180326-143104_777843831",
      "dateCreated": "Mar 26, 2018 5:29:25 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.sql\nselect count(ind_tjcr_fin_ult1) as Num_Credit_Cards,count(sexo) as Num_Gender, sexo as Gender, count(segmento) as Num_Cust_Identification, segmento as Cust_Identification,avg(renta) as Avg_Gross_Income\nfrom sbank\nwhere ind_ahor_fin_ult1 is NOT NULL\nand renta is NOT NULL\nand sexo is NOT NULL\nand segmento is NOT NULL\ngroup by sexo,segmento",
      "dateUpdated": "Mar 26, 2018 5:29:25 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "sql"
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "Num_Credit_Cards\tNum_Gender\tGender\tNum_Cust_Identification\tCust_Identification\tAvg_Gross_Income\n2121150\t2121150\tH\t2121150\t03 - UNIVERSITARIO\t113415.91116352427\n306160\t306160\tV\t306160\t01 - TOP\t173019.65416266042\n3935949\t3935949\tV\t3935949\t02 - PARTICULARES\t139593.6386064534\n2586894\t2586894\tH\t2586894\t02 - PARTICULARES\t144547.24711068664\n1672298\t1672298\tV\t1672298\t03 - UNIVERSITARIO\t120256.61834835628\n173615\t173615\tH\t173615\t01 - TOP\t180849.68602067855\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1522099765406_-888174200",
      "id": "20180326-143136_803061786",
      "dateCreated": "Mar 26, 2018 5:29:25 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.sql\nselect count(ind_plan_fin_ult1) as Num_Securities,count(sexo) as Num_Gender, sexo as Gender, count(segmento) as Num_Cust_Identification, segmento as Cust_Identification,avg(renta) as Avg_Gross_Income\nfrom sbank\nwhere ind_ahor_fin_ult1 is NOT NULL\nand renta is NOT NULL\nand sexo is NOT NULL\nand segmento is NOT NULL\ngroup by sexo,segmento",
      "dateUpdated": "Mar 26, 2018 5:29:25 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "sql"
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "Num_Securities\tNum_Gender\tGender\tNum_Cust_Identification\tCust_Identification\tAvg_Gross_Income\n2121150\t2121150\tH\t2121150\t03 - UNIVERSITARIO\t113415.91116352427\n306160\t306160\tV\t306160\t01 - TOP\t173019.65416266042\n3935949\t3935949\tV\t3935949\t02 - PARTICULARES\t139593.6386064534\n2586894\t2586894\tH\t2586894\t02 - PARTICULARES\t144547.24711068664\n1672298\t1672298\tV\t1672298\t03 - UNIVERSITARIO\t120256.61834835628\n173615\t173615\tH\t173615\t01 - TOP\t180849.68602067855\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1522099765407_-888558949",
      "id": "20180326-143204_110912189",
      "dateCreated": "Mar 26, 2018 5:29:25 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.sql\nselect count(ind_viv_fin_ult1) as Num_Home_Acc,count(sexo) as Num_Gender, sexo as Gender, count(segmento) as Num_Cust_Identification, segmento as Cust_Identification,avg(renta) as Avg_Gross_Income\nfrom sbank\nwhere ind_ahor_fin_ult1 is NOT NULL\nand renta is NOT NULL\nand sexo is NOT NULL\nand segmento is NOT NULL\ngroup by sexo,segmento",
      "dateUpdated": "Mar 26, 2018 5:29:25 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "sql"
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "Num_Home_Acc\tNum_Gender\tGender\tNum_Cust_Identification\tCust_Identification\tAvg_Gross_Income\n2121150\t2121150\tH\t2121150\t03 - UNIVERSITARIO\t113415.91116352427\n306160\t306160\tV\t306160\t01 - TOP\t173019.65416266042\n3935949\t3935949\tV\t3935949\t02 - PARTICULARES\t139593.6386064534\n2586894\t2586894\tH\t2586894\t02 - PARTICULARES\t144547.24711068664\n1672298\t1672298\tV\t1672298\t03 - UNIVERSITARIO\t120256.61834835628\n173615\t173615\tH\t173615\t01 - TOP\t180849.68602067855\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1522099765407_-888558949",
      "id": "20180324-111240_152690922",
      "dateCreated": "Mar 26, 2018 5:29:25 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.sql\nselect count(ind_nomina_ult1) as Num_Payroll,count(sexo) as Num_Gender, sexo as Gender, count(segmento) as Num_Cust_Identification, segmento as Cust_Identification,avg(renta) as Avg_Gross_Income\nfrom sbank\nwhere ind_ahor_fin_ult1 is NOT NULL\nand renta is NOT NULL\nand sexo is NOT NULL\nand segmento is NOT NULL\ngroup by sexo,segmento",
      "dateUpdated": "Mar 26, 2018 5:29:25 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "sql"
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "Num_Payroll\tNum_Gender\tGender\tNum_Cust_Identification\tCust_Identification\tAvg_Gross_Income\n2121150\t2121150\tH\t2121150\t03 - UNIVERSITARIO\t113415.91116352427\n306160\t306160\tV\t306160\t01 - TOP\t173019.65416266042\n3935949\t3935949\tV\t3935949\t02 - PARTICULARES\t139593.6386064534\n2586894\t2586894\tH\t2586894\t02 - PARTICULARES\t144547.24711068664\n1672298\t1672298\tV\t1672298\t03 - UNIVERSITARIO\t120256.61834835628\n173615\t173615\tH\t173615\t01 - TOP\t180849.68602067855\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1522099765408_-902794658",
      "id": "20180324-111451_1062723711",
      "dateCreated": "Mar 26, 2018 5:29:25 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.sql\nselect count(ind_nom_pens_ult1) as Num_Pensions,count(sexo) as Num_Gender, sexo as Gender, count(segmento) as Num_Cust_Identification, segmento as Cust_Identification,avg(renta) as Avg_Gross_Income\nfrom sbank\nwhere ind_ahor_fin_ult1 is NOT NULL\nand renta is NOT NULL\nand sexo is NOT NULL\nand segmento is NOT NULL\ngroup by sexo,segmento",
      "dateUpdated": "Mar 26, 2018 5:29:25 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "sql"
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "Num_Pensions\tNum_Gender\tGender\tNum_Cust_Identification\tCust_Identification\tAvg_Gross_Income\n2121150\t2121150\tH\t2121150\t03 - UNIVERSITARIO\t113415.91116352427\n306160\t306160\tV\t306160\t01 - TOP\t173019.65416266042\n3935949\t3935949\tV\t3935949\t02 - PARTICULARES\t139593.6386064534\n2586894\t2586894\tH\t2586894\t02 - PARTICULARES\t144547.24711068664\n1672298\t1672298\tV\t1672298\t03 - UNIVERSITARIO\t120256.61834835628\n173615\t173615\tH\t173615\t01 - TOP\t180849.68602067855\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1522099765408_-902794658",
      "id": "20180326-142945_1461461984",
      "dateCreated": "Mar 26, 2018 5:29:25 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.sql\nselect count(ind_recibo_ult1) as Num_Direct_Debit,count(sexo) as Num_Gender, sexo as Gender, count(segmento) as Num_Cust_Identification, segmento as Cust_Identification,avg(renta) as Avg_Gross_Income\nfrom sbank\nwhere ind_ahor_fin_ult1 is NOT NULL\nand renta is NOT NULL\nand sexo is NOT NULL\nand segmento is NOT NULL\ngroup by sexo,segmento",
      "dateUpdated": "Mar 26, 2018 5:29:25 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "sql"
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "Num_Direct_Debit\tNum_Gender\tGender\tNum_Cust_Identification\tCust_Identification\tAvg_Gross_Income\n2121150\t2121150\tH\t2121150\t03 - UNIVERSITARIO\t113415.91116352427\n306160\t306160\tV\t306160\t01 - TOP\t173019.65416266042\n3935949\t3935949\tV\t3935949\t02 - PARTICULARES\t139593.6386064534\n2586894\t2586894\tH\t2586894\t02 - PARTICULARES\t144547.24711068664\n1672298\t1672298\tV\t1672298\t03 - UNIVERSITARIO\t120256.61834835628\n173615\t173615\tH\t173615\t01 - TOP\t180849.68602067855\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1522099765408_-902794658",
      "id": "20180326-143008_1446242799",
      "dateCreated": "Mar 26, 2018 5:29:25 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.sql\n",
      "dateUpdated": "Mar 26, 2018 5:29:25 PM",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1522099765409_-903179407",
      "id": "20180326-143733_552743360",
      "dateCreated": "Mar 26, 2018 5:29:25 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "ExploratoryAnalysis-1",
  "id": "2D9Q2K182",
  "angularObjects": {
    "2DAVGMF7R:shared_process": [],
    "2DBVU2576:shared_process": [],
    "2D8STWDCM:shared_process": [],
    "2DAVA43S2:shared_process": [],
    "2DBKXU5BJ:shared_process": [],
    "2D89B3Z5Z:shared_process": [],
    "2D8ZA7H9R:shared_process": [],
    "2D8B793QR:shared_process": [],
    "2DBKWSBPS:shared_process": [],
    "2D8ZET3ZD:shared_process": [],
    "2D8Y3SWSJ:shared_process": [],
    "2D88K6WCM:shared_process": [],
    "2D893DVM7:shared_process": [],
    "2DAZEX8F8:shared_process": [],
    "2DATV9FU6:shared_process": [],
    "2D9RA1B4V:shared_process": [],
    "2D9S7NZ95:shared_process": [],
    "2DAYQP1W5:shared_process": [],
    "2DC2X879S:shared_process": []
  },
  "config": {},
  "info": {}
}